generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  name                     String
  email                    String    @unique
  emailVerified            Boolean   @default(false) // Email verification
  emailOtp                 String? // OTP for email verification
  emailOtpExpiry           DateTime? // OTP expiry time for email verification
  password                 String
  profilePicture           String?
  compressedProfilePicture String?
  phoneNumber              String?
  countryCode              String?
  phoneNumberVerified      Boolean   @default(false) // Phone number verification
  phoneOtp                 String? // OTP for phone number verification
  phoneOtpExpiry           DateTime? // OTP expiry time for phone number verification
  refreshTokens            String[]  @default([])
  addresses                Address[] // One to Many relation
  defaultAddressId         String?   @unique // Reference to the default address
  defaultAddress           Address?  @relation("UserDefaultAddress", fields: [defaultAddressId], references: [id])
  orders                   Order[] // One to Many relation
  cart                     Cart? // One to One relation
  storeId                  String?   @unique
  Store                    Store? // One to One relation
  googleId                 String?   @unique // For Social Login
  facebookId               String?   @unique // For Social Login
  stripeCustomerId         String?   @unique // Stripe Customer ID
  reviews                  Review[] // One to Many relation
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  passwordResetToken       String? // Token for password reset
  passwordResetTokenExpiry DateTime? // Token expiry date
}

model Address {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  apt                String?
  block              String?
  address            String
  lat                Float
  lon                Float
  type               String // e.g., Home, Work
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  UserDefaultAddress User?    @relation("UserDefaultAddress")
}

model Store {
  id                  String        @id @default(cuid())
  name                String
  countryCode         String
  phoneNumber         String
  phoneNumberVerified Boolean       @default(false) // Phone number verification
  phoneOtp            String? // OTP for phone number verification
  phoneOtpExpiry      DateTime? // OTP expiry time for phone number verification
  email               String
  emailVerified       Boolean       @default(false) // Email verification
  emailOtp            String? // OTP for email verification
  emailOtpExpiry      DateTime? // OTP expiry time for email verification
  image               String?
  compressedImage     String?
  user                User          @relation(fields: [userId], references: [id])
  userId              String        @unique
  address             StoreAddress? // One to One relation
  orders              Order[] // One to Many relation
  menuItems           MenuItem[] // One to Many relation
  reviews             Review[] // One to Many relation
  status              StoreStatus   @default(PENDING)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

enum StoreStatus {
  // NOT_APPLIED
  PENDING
  APPROVED
}

model StoreAddress {
  id        String   @id @default(cuid())
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String   @unique
  address   String
  lat       Float
  lon       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Predifined categories for menu items
model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  menuItems MenuItem[] // One to Many relation
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Predefined options for customizing menu items
model Option {
  id              String           @id @default(cuid())
  name            String           // e.g., Size, Toppings
  predefinedChoices PredefinedChoice[] // One to Many relation
  menuItemsOption MenuItemOption[] // One to Many relation
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}
model PredefinedChoice {
  id              String           @id @default(cuid())
  menuItemsChoice MenuItemChoice[] // One to Many relation
  option          Option           @relation(fields: [optionId], references: [id])
  optionId        String
  name            String           // e.g., Small, Medium, Large
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model MenuItem {
  id              String           @id @default(cuid())
  store           Store            @relation(fields: [storeId], references: [id])
  storeId         String
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  name            String
  description     String?
  price           Float            // Base price
  image           String?
  compressedImage String?
  isVeg           Boolean
  options         MenuItemOption[] // One to Many relation
  orderItems      OrderItem[]      // One to Many relation
  reviews         Review[]         // One to Many relation
  cartItems       CartItem[]       // One to Many relation
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model MenuItemOption {
  id         String           @id @default(cuid())
  menuItem   MenuItem         @relation(fields: [menuItemId], references: [id])
  menuItemId String
  option     Option           @relation(fields: [optionId], references: [id])
  optionId   String
  choices    MenuItemChoice[] // One to Many relation
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model MenuItemChoice {
  id               String         @id @default(cuid())
  menuItemOption   MenuItemOption @relation(fields: [menuItemOptionId], references: [id])
  menuItemOptionId String
  predefinedChoice PredefinedChoice? @relation(fields: [predefinedChoiceId], references: [id])
  predefinedChoiceId String?
  customChoice     String?
  additionalPrice  Float          // Additional price for the choice
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  rating     Int // Rating out of 5
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  store       Store       @relation(fields: [storeId], references: [id])
  storeId     String
  items       OrderItem[] // One to Many relation
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

model OrderItem {
  id         String            @id @default(cuid())
  order      Order             @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem          @relation(fields: [menuItemId], references: [id])
  menuItemId String
  name       String
  quantity   Int
  price      Float
  options    OrderItemOption[] // One to Many relation
  note       String? // Optional field for specific notes or instructions
}

model OrderItemOption {
  id              String    @id @default(cuid())
  orderItem       OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId     String
  name            String // e.g., Size
  choice          String // e.g., Medium
  additionalPrice Float? // Additional cost for the selected option
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id         String           @id @default(cuid())
  cart       Cart             @relation(fields: [cartId], references: [id])
  cartId     String
  menuItem   MenuItem         @relation(fields: [menuItemId], references: [id])
  menuItemId String
  name       String
  quantity   Int
  price      Float
  options    CartItemOption[] // One to Many relation to capture selected customizations
  note       String? // Optional field for specific notes or instructions
}

model CartItemOption {
  id              String   @id @default(cuid())
  cartItem        CartItem @relation(fields: [cartItemId], references: [id])
  cartItemId      String
  name            String // e.g., Size
  choice          String // e.g., Medium
  additionalPrice Float? // Additional cost for the selected option
}

model AdminUser {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  refreshTokens String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
